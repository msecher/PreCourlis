# -*- coding: utf-8 -*-
"""
/***************************************************************************
 PreCourlisPlugin
                                 A QGIS plugin
 Creation de profils pour Courlis
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-03-13
        git sha              : $Format:%H$
        copyright            : (C) 2020 by EDF Hydro, DeltaCAD, Camptocamp
        email                : matthieu.secher@edf.fr
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import os.path

from PyQt5.QtCore import QSettings, QTranslator, qVersion, QCoreApplication
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QAction, QMenu

# Initialize Qt resources from file resources.py
from PreCourlis.ui import resources_rc
# Import the code for the dialog
from PreCourlis.widgets.PreCourlis_dialog import PreCourlisPluginDialog


class PreCourlisPlugin:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'PreCourlisPlugin_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&PreCourlis')

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('PreCourlisPlugin', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        self.action = QAction(QIcon(":/plugins/PreCourlis/icon.png"), "PreCourlis", self.iface.mainWindow())

        # self.actionBief = QAction("&Bief", self.iface.mainWindow())
        self.actionGeoRef = QAction("Importer un fichier .georef", self.iface.mainWindow())
        self.actionVisuProfils = QAction("Visualiser les profils", self.iface.mainWindow())
        self.actionInterpProfils = QAction("Interpoler des profils", self.iface.mainWindow())
        self.actionConverTrace = QAction("Convertir les traces en profils", self.iface.mainWindow())
        self.actionProjZ = QAction("Projeter un semis de point sur les profils", self.iface.mainWindow())
        self.actionProjRive = QAction("Projeter les berges", self.iface.mainWindow())
        self.actionAbout = QAction(
            QIcon(":/plugins/precourlis/icon.png"), "A propos", self.iface.mainWindow()
        )

        self.actionAddBief = QAction("Ajouter un bief", self.iface.mainWindow())
        self.actionRenaBief = QAction("Renommer un bief", self.iface.mainWindow())
        self.actionDelBief = QAction("Supprimmer un bief", self.iface.mainWindow())
        self.actionAddLayer = QAction("Ajouter une couche vectorielle", self.iface.mainWindow())

        self.menuBief = QMenu(self.iface.mainWindow())
        self.menuBief.setTitle("&Biefs")

        self.menuBief.addAction(self.actionAddBief)
        self.menuBief.addAction(self.actionRenaBief)
        self.menuBief.addAction(self.actionDelBief)
        self.menuBief.addAction(self.actionAddLayer)

        self.menuToolBar = QMenu(self.iface.mainWindow())
        self.menuToolBar.addAction(self.actionGeoRef)
        self.menuToolBar.addAction(self.actionVisuProfils)
        self.menuToolBar.addAction(self.actionConverTrace)
        self.menuToolBar.addAction(self.actionProjZ)
        self.menuToolBar.addAction(self.actionProjRive)
        self.menuToolBar.addAction(self.actionInterpProfils)
        self.menuToolBar.addAction(self.actionAbout)

        self.action.setMenu(self.menuToolBar)

        self.iface.addToolBarIcon(self.action)

        # self.iface.addPluginToMenu("&PreCourlis", self.actionBief)
        self.iface.addPluginToMenu("&PreCourlis", self.actionGeoRef)
        self.iface.addPluginToMenu("&PreCourlis", self.actionVisuProfils)
        self.iface.addPluginToMenu("&PreCourlis", self.actionConverTrace)
        self.iface.addPluginToMenu("&PreCourlis", self.actionProjZ)
        self.iface.addPluginToMenu("&PreCourlis", self.actionProjRive)
        self.iface.addPluginToMenu("&PreCourlis", self.actionInterpProfils)
        self.iface.addPluginToMenu("&PreCourlis", self.actionAbout)

        '''
        self.actionAddBief.triggered.connect(self.ajoutBief)
        self.actionAddLayer.triggered.connect(self.ajoutLayer)
        self.actionGeoRef.triggered.connect(self.importGeoRef)
        self.actionConverTrace.triggered.connect(self.convertirTrace)
        self.actionVisuProfils.triggered.connect(self.openEditor)
        self.actionProjZ.triggered.connect(self.projZProfil)
        self.actionProjRive.triggered.connect(self.projAxeBerge)
        self.actionInterpProfils.triggered.connect(self.interpProfils)
        '''

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&PreCourlis'),
                action)
            self.iface.removeToolBarIcon(action)

        # Remove the plugin menu item and icon
        self.iface.removePluginMenu("&PreCourlis", self.action)
        self.iface.removePluginMenu("&PreCourlis", self.actionGeoRef)
        self.iface.removePluginMenu("&PreCourlis", self.actionVisuProfils)
        self.iface.removePluginMenu("&PreCourlis", self.actionInterpProfils)
        self.iface.removePluginMenu("&PreCourlis", self.actionConverTrace)
        self.iface.removePluginMenu("&PreCourlis", self.actionProjZ)
        self.iface.removePluginMenu("&PreCourlis", self.actionProjRive)
        self.iface.removePluginMenu("&PreCourlis", self.actionAbout)

        self.iface.removeToolBarIcon(self.action)
